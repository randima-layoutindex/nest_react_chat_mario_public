import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { io } from 'socket.io-client'
import { useState,useEffect } from 'react'

export default function Home() {
  const [messages,setMessages] = useState([])
  const [messageText,setMessageText] = useState("")
  const [joined,setJoined] = useState(false)
  const [name,setName] = useState("")
  const [typingDisplay,setTypingDisplay] = useState("")


  let socket = io("http://localhost:3001")

  useEffect(()=>{
    socket.emit("findAllMessages",{},(response)=>{
      setMessages([response])
    })

    socket.on("message",(message)=>{
      setMessages([...messages,message])
    })

    socket.on("typing",({name,isTyping})=>{
      if(isTyping){
        setTypingDisplay(`${name} is typing...`)
      }else{
        setTypingDisplay("")
      }
    })
    console.log(messages)
  },[])

  const join = (e)=>{
    e.preventDefault()
    socket.emit("join",{name:name},()=>{
      setJoined(true)
    })
  }

  const sendMessage = (e)=>{
    e.preventDefault()
    socket.emit("createMessage",{text:messageText},response=>{
      setMessageText("")
    })
  }

  let timeout;

  const emitTyping = ()=>{
    socket.emit("typing",{isTyping:true});
    timeout = setTimeout(()=>{
      socket.emit("typing",{isTyping:false})
    },2000)
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
<div>
<div>
  {
    !joined && <div>
      <h2>What is your name</h2>
      <input type="text" value={name} onChange={(e)=>setName(e.target.value)} />
      <input type="button" value={"submit"} onClick={join} />
      </div>
  }
  {
    typingDisplay && <div>
      <p>{typingDisplay}</p>
      </div>
  }
  <div>
    <div>
      <h2>Type message</h2>
      <input type="text" value={messageText} onChange={(e)=>setMessageText(e.target.value)} />
      <input type="button" value="send" onClick={sendMessage} />
    </div>
    {/* {
      messages && messages.map((item,index)=>{
        return <div key={index}><h2>{item.name} - {item.message}</h2></div>
      })
    }  */}
    
  </div>
</div>
</div>
    </>
  )
}
